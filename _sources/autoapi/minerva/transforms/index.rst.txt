minerva.transforms
==================

.. py:module:: minerva.transforms


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/minerva/transforms/activity_image/index
   /autoapi/minerva/transforms/random_transform/index
   /autoapi/minerva/transforms/split_transform/index
   /autoapi/minerva/transforms/tfc/index
   /autoapi/minerva/transforms/transform/index


Classes
-------

.. autoapisummary::

   minerva.transforms.CastTo
   minerva.transforms.ColorJitter
   minerva.transforms.ContrastiveTransform
   minerva.transforms.Crop
   minerva.transforms.EmptyTransform
   minerva.transforms.Flip
   minerva.transforms.Gradient
   minerva.transforms.GrayScale
   minerva.transforms.Identity
   minerva.transforms.Indexer
   minerva.transforms.Normalize
   minerva.transforms.PadCrop
   minerva.transforms.Padding
   minerva.transforms.PerlinMasker
   minerva.transforms.RandomCrop
   minerva.transforms.RandomFlip
   minerva.transforms.RandomGrayScale
   minerva.transforms.RandomRotation
   minerva.transforms.RandomSolarize
   minerva.transforms.Repeat
   minerva.transforms.Rotation
   minerva.transforms.Solarize
   minerva.transforms.Squeeze
   minerva.transforms.TransformPipeline
   minerva.transforms.Transpose
   minerva.transforms.Unsqueeze
   minerva.transforms._RandomSyncedTransform
   minerva.transforms._Transform


Package Contents
----------------

.. py:class:: CastTo(dtype)

   Bases: :py:obj:`_Transform`


   Cast the input data to the specified data type.

   Cast the input data to the specified data type.

   Parameters
   ----------
   dtype : type
       The data type to which the input data will be cast.


   .. py:method:: __call__(x)

      Cast the input data to the specified data type.



   .. py:method:: __str__()


   .. py:attribute:: dtype


.. py:class:: ColorJitter(brightness = 1.0, contrast = 1.0, saturation = 1.0, hue = 0.0)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   Applies fixed adjustments to brightness, contrast, saturation, and hue to an input image.

   Parameters
   ----------
   brightness : float, optional
       Fixed factor for brightness adjustment. A value of 1.0 means no change. Defaults to 1.0.
   contrast : float, optional
       Fixed factor for contrast adjustment. A value of 1.0 means no change. Defaults to 1.0.
   saturation : float, optional
       Fixed factor for saturation adjustment. A value of 1.0 means no change. Defaults to 1.0.
   hue : float, optional
       Fixed degree shift for hue adjustment, in the range [-180, 180]. Defaults to 0.0.

   Returns
   -------
   np.ndarray
       The transformed image with fixed brightness, contrast, saturation, and hue adjustments applied.


   .. py:method:: __call__(image)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: brightness
      :value: 1.0



   .. py:attribute:: contrast
      :value: 1.0



   .. py:attribute:: hue
      :value: 0.0



   .. py:attribute:: saturation
      :value: 1.0



.. py:class:: ContrastiveTransform(transform)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.


   .. py:method:: __call__(x)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: transform


.. py:class:: Crop(output_size, pad_mode = 'reflect', coords = (0, 0))

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   Crops the input image to a specified output size, with optional padding if needed.

   Parameters
   ----------
   output_size : Tuple[int, int]
       Desired output size as (height, width).
   pad_mode : str, optional
       Padding mode used if output size is larger than input size. Defaults to 'reflect'.
   coords : Tuple[int, int], optional
       Top-left coordinates for the crop box.
       Values must go from 0 to 1 indicating the relative position on where the
       new top-left corner can be set, taking in consideration the new size

   Returns
   -------
   np.ndarray
       Cropped image, padded as necessary.


   .. py:method:: __call__(image)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: coords
      :value: (0, 0)



   .. py:attribute:: output_size


   .. py:attribute:: pad_mode
      :value: 'reflect'



.. py:class:: EmptyTransform

   Bases: :py:obj:`minerva.transforms.transform._Transform`


   A transform that does nothing to the input data.


   .. py:method:: __call__(data)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



.. py:class:: Flip(axis = 0)

   Bases: :py:obj:`_Transform`


   Flip the input data along the specified axis.

   Flip the input data along the specified axis.

   Parameters
   ----------
   axis : int | List[int], optional
       One or more axis to flip the input data along, by default 0.
       If a list of axis is provided, the input data is flipped along all the specified axis in the order they are provided.


   .. py:method:: __call__(x)

      Flip the input data along the specified axis.
      if axis is an integer, the input data is flipped along the specified axis.
      if axis is a list of integers, the input data is flipped along all the specified axis in the order they are provided.
      The input must have the same, or less, number of dimensions as the length of the list of axis.



   .. py:method:: __str__()


   .. py:attribute:: axis
      :value: 0



.. py:class:: Gradient(direction)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   direction:
       0 -> Gradient along the x-axis (width)
       1 -> Gradient along the y-axis (height)


   .. py:method:: __call__(x)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: direction


   .. py:attribute:: directions


   .. py:method:: generate_gradient(shape)

      Inputs in format (H, W)
      Outputs a gradient from 0 to 1 in either x or y direction based on the direction parameter



.. py:class:: GrayScale(method = 'luminosity')

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   Converts an image to grayscale using the specified method.

   Parameters
   ----------
   method : {'average', 'luminosity'}, optional
       The method to compute grayscale:
       - 'average': (R + G + B) / 3
       - 'luminosity': 0.299R + 0.587G + 0.114B
       Defaults to 'luminosity'.


   .. py:method:: __call__(image)

      Applies grayscale conversion to the input RGB image.

      Parameters
      ----------
      image : np.ndarray
          Input image in RGB format with shape (H, W, 3).

      Returns
      -------
      np.ndarray
          Grayscale image with shape (H, W, 3) where all channels are equal.



   .. py:method:: __str__()


   .. py:attribute:: method
      :value: 'luminosity'



.. py:class:: Identity

   Bases: :py:obj:`_Transform`


   This class is a dummy transform that does nothing. It is useful when
   you want to skip a transform in a pipeline.


   .. py:method:: __call__(x)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


.. py:class:: Indexer(index)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   This transform extracts a single channel from a multi-channel image.

   Parameters
   ----------
   index : int
       The index of the channel to extract.


   .. py:method:: __call__(x)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: index


.. py:class:: Normalize(mean, std, to_rgb=False, normalize_labels=False)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   Normalize the input data using the provided means and standard deviations.

   Parameters
   ----------
   mean : List[float]
       List of means for each channel.
   std : List[float]
       List of standard deviations for each channel.
   to_rgb : bool, optional
       Convert grayscale images to RGB format, by default False.
   normalize_labels : bool, optional
       Normalize label images, by default False.



   .. py:method:: __call__(data)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: mean


   .. py:attribute:: normalize_labels
      :value: False



   .. py:attribute:: std


   .. py:attribute:: to_rgb
      :value: False



.. py:class:: PadCrop(target_h_size, target_w_size, padding_mode = 'reflect', seed = None, constant_values = 0)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   Transforms image and pads or crops it to the target size. If the
   target size is larger than the input size, the image is padded, else,
   the image is cropped. The same happens for both height and width.
   The padding mode can be specified, as well as the seed for the random
   number generator.

   For padding, the padding is applied symmetrically on both sides of the
   image, thus, image will be centered in the padded image. For cropping,
   the crop is applied from a random position in the image.

   Image is expected to be in C x H x W, or H x W format.

   Parameters
   ----------
   target_h_size : int
       Desired height size.
   target_w_size : int
       Desired width size.
   padding_mode : str, optional
       The padding mode to use, by default "reflect"
   seed : int, optional
       The seed for the random number generator. It is used to generate
       the random crop position. By default, None.
   constant_values : int, optional
       If padding mode is 'constant', the value to use for padding. By
       default 0.


   .. py:method:: __call__(x)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: constant_values
      :value: 0



   .. py:attribute:: padding_mode
      :value: 'reflect'



   .. py:attribute:: rng


   .. py:attribute:: seed
      :value: None



   .. py:attribute:: target_h_size


   .. py:attribute:: target_w_size


.. py:class:: Padding(target_h_size, target_w_size)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.


   .. py:method:: __call__(x)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: target_h_size


   .. py:attribute:: target_w_size


.. py:class:: PerlinMasker(octaves, scale = 1)

   Bases: :py:obj:`_Transform`


   Zeroes entries of a tensor according to the sign of Perlin noise. Seed for the noise generator given by torch.randint

   Zeroes entries of a tensor according to the sign of Perlin noise. Seed for the noise generator given by torch.randint

   Parameters
   ----------
   octaves: int
       Level of detail for the Perlin noise generator
   scale: float = 1
       Optionally rescale the Perlin noise. Default is 1 (no rescaling)


   .. py:method:: __call__(x)

      Zeroes entries of a tensor according to the sign of Perlin noise.

      Parameters
      ----------
      x: np.ndarray
          The tensor whose entries to zero.



   .. py:method:: __str__()


   .. py:attribute:: octaves


   .. py:attribute:: scale
      :value: 1



.. py:class:: RandomCrop(crop_size, num_samples = 1, seed = None, pad_mode = 'reflect')

   Bases: :py:obj:`_RandomSyncedTransform`


   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   Parameters
   ----------
   transform : _Transform
       A transform that will be applied to the input data.
   num_samples : int
       The number of samples that will be transformed.
   seed : Optional[int], optional
       The seed that will be used to generate the random state, by default None.


   .. py:attribute:: crop_size


   .. py:attribute:: pad_mode
      :value: 'reflect'



   .. py:method:: select_transform()


.. py:class:: RandomFlip(num_samples = 1, possible_axis = 0, seed = None)

   Bases: :py:obj:`_RandomSyncedTransform`


   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   A transform that flips the input data along a random axis.

   Parameters
   ----------
   num_samples : int
       The number of samples that will be transformed.
   possible_axis : Union[int, List[int]], optional
       Possible axis to be transformed, will be chosen at random, by default 0
   seed : Optional[int], optional
       A seed to ensure deterministic run, by default None


   .. py:attribute:: possible_axis
      :value: 0



   .. py:method:: select_transform()

      selects the transform to be applied to the data.



.. py:class:: RandomGrayScale(num_samples = 1, seed = None, prob = 0.1, method = 'luminosity')

   Bases: :py:obj:`_RandomSyncedTransform`


   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   Parameters
   ----------
   transform : _Transform
       A transform that will be applied to the input data.
   num_samples : int
       The number of samples that will be transformed.
   seed : Optional[int], optional
       The seed that will be used to generate the random state, by default None.


   .. py:attribute:: method
      :value: 'luminosity'



   .. py:attribute:: prob
      :value: 0.1



   .. py:method:: select_transform()


.. py:class:: RandomRotation(degrees, prob, num_samples = 1, seed = None)

   Bases: :py:obj:`_RandomSyncedTransform`


   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   Randomly applies a rotation to the image with a specified probability.

   Parameters
   ----------
   degrees : float
       Maximum absolute value of the rotation angle in degrees. The angle is sampled
       uniformly from [-degrees, +degrees].
   prob : float
       Probability that the rotation will be applied.
   num_samples : int, optional
       Number of samples to generate per call (for contrastive learning), default is 1.
   seed : int, optional
       Seed for the random number generator, useful for reproducibility.


   .. py:attribute:: degrees


   .. py:attribute:: prob


   .. py:method:: select_transform()


.. py:class:: RandomSolarize(num_samples = 1, seed = None, threshold = 128, prob = 1.0)

   Bases: :py:obj:`_RandomSyncedTransform`


   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   Parameters
   ----------
   transform : _Transform
       A transform that will be applied to the input data.
   num_samples : int
       The number of samples that will be transformed.
   seed : Optional[int], optional
       The seed that will be used to generate the random state, by default None.


   .. py:attribute:: prob
      :value: 1.0



   .. py:method:: select_transform()


   .. py:attribute:: threshold
      :value: 128



.. py:class:: Repeat(axis, n_repetitions)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   This transform repeats the input data along the specified axis.

   Parameters
   ----------
   axis : int
       The axis along which to repeat the input data.
   n_repetitions : int
       The number of repetitions.


   .. py:method:: __call__(x)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: axis


   .. py:attribute:: n_repetitions


.. py:class:: Rotation(degrees)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   Rotates an image by a specified angle using reflection padding.

   Parameters
   ----------
   degrees : float
       Angle in degrees to rotate the image counterclockwise.

   Notes
   -----
   - Accepts input with shape (H, W) or (H, W, C), where C can be any number of channels.
   - For multi-channel images, the same transformation is applied to all channels.
   - Uses OpenCV's warpAffine with reflection padding.


   .. py:method:: __call__(image)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: degrees


.. py:class:: Solarize(threshold = 128)

   Bases: :py:obj:`_Transform`


   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.

   Solarizes the image by inverting pixel values above a specified threshold.

   Parameters
   ----------
   threshold : int, optional
       Intensity threshold for inversion, default is 128.

   Returns
   -------
   np.ndarray
       Solarized image with inverted pixel values above threshold.


   .. py:method:: __call__(image)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:method:: __str__()


   .. py:attribute:: threshold
      :value: 128



.. py:class:: Squeeze(axis)

   Bases: :py:obj:`_Transform`


   Remove single-dimensional entries from the shape of an array.

   Remove single-dimensional entries from the shape of an array.

   Parameters
   ----------
   axis : int
       The position of the axis to be removed.


   .. py:method:: __call__(x)

      Remove single-dimensional entries from the shape of an array.



   .. py:method:: __str__()


   .. py:attribute:: axis


.. py:class:: TransformPipeline(transforms)

   Bases: :py:obj:`_Transform`


   Apply a sequence of transforms to a single sample of data and return the
   transformed data.

   Apply a sequence of transforms to a single sample of data and return
   the transformed data.

   Parameters
   ----------
   transforms : List[_Transform]
       A list of transforms to be applied to the input data.


   .. py:method:: __add__(other)

      Add a transform to the pipeline.



   .. py:method:: __call__(x)

      Apply a sequence of transforms to a single sample of data and return
      the transformed data.



   .. py:method:: __radd__(other)

      Add a transform to the pipeline.



   .. py:method:: __str__()


   .. py:attribute:: transforms


.. py:class:: Transpose(axes)

   Bases: :py:obj:`_Transform`


   Reorder the axes of numpy arrays.

   Reorder the axes of numpy arrays.

   Parameters
   ----------
   axes : int
       The order of the new axes


   .. py:method:: __call__(x)

      Reorder the axes of numpy arrays.



   .. py:method:: __str__()


   .. py:attribute:: axes


.. py:class:: Unsqueeze(axis)

   Bases: :py:obj:`_Transform`


   Add a new axis to the input data at the specified position.

   Add a new axis to the input data at the specified position.

   Parameters
   ----------
   axis : int
       The position of the new axis to be added.


   .. py:method:: __call__(x)

      Add a new axis to the input data at the specified position.



   .. py:method:: __str__()


   .. py:attribute:: axis


.. py:class:: _RandomSyncedTransform(num_samples = 1, seed = None)

   Bases: :py:obj:`minerva.transforms.transform._Transform`


   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   Orchestrate the application of a type of random transform to a list of data, ensuring that the same random state is used for all of them.

   Parameters
   ----------
   transform : _Transform
       A transform that will be applied to the input data.
   num_samples : int
       The number of samples that will be transformed.
   seed : Optional[int], optional
       The seed that will be used to generate the random state, by default None.


   .. py:method:: __call__(data)

      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



   .. py:attribute:: num_samples
      :value: 1



   .. py:attribute:: rng


   .. py:method:: select_transform()
      :abstractmethod:



   .. py:attribute:: transform


   .. py:attribute:: transformations_executed
      :value: 0



.. py:class:: _Transform

   This class is a base class for all transforms. Transforms is just a
   fancy word for a function that takes an input and returns an output. The
   input and output can be anything. However, transforms operates over a
   single sample of data and does not require any additional information to
   perform the transformation. The __call__ method should be overridden in
   subclasses to define the transformation logic.


   .. py:method:: __call__(*args, **kwargs)
      :abstractmethod:


      Implement the transformation logic in this method. Usually, the
      transformation is applied on a single sample of data.



