minerva.analysis.model_analysis
===============================

.. py:module:: minerva.analysis.model_analysis


Classes
-------

.. autoapisummary::

   minerva.analysis.model_analysis.TSNEAnalysis
   minerva.analysis.model_analysis._ModelAnalysis


Module Contents
---------------

.. py:class:: TSNEAnalysis(label_names = None, height = 800, width = 800, text_size = 12, title = None, x_axis_title = 'x', y_axis_title = 'y', legend_title = 'Label', output_filename = 'tsne.png', seed = 42, n_components = 2)

   Bases: :py:obj:`_ModelAnalysis`


   Perform t-SNE analysis on the embeddings generated by a model.
   A t-SNE plot is generated using the embeddings and saved in the `path`
   directory. The plot is saved as a PNG image file.


   Plot a t-SNE plot of the embeddings generated by a model.

   Parameters
   ----------
   label_names : Optional[Dict[Union[int, str], str]], optional
       Labels to use for the plot, instead of the original labels in the
       data (`y`). The keys are the original labels and the values are the
       new labels to use in the plot. If None, the original labels are used
       as they are. By default None
   height : int, optional
       Height of the figure, by default 800
   width : int, optional
       Width of the figure, by default 800
   text_size : int, optional
       Size of font used in plot, by default 12
   title : str, optional
       Title of graph, by default None
   x_axis_title : str, optional
       Name of x-axis, by default "x"
   y_axis_title : str, optional
       Name of y-axis, by default "y"
   legend_title : str, optional
       Name for legend title, by default "Label"
   output_filename : PathLike, optional
       Name of  the output file to save the plot as a PNG image file. The
       file will be saved in the `path` directory with this name. By
       default "tsne.png"
   seed : int, optional
       Random seed for t-SNE, by default 42
   n_components : int, optional
       Number of components to use in t-SNE, by default 2


   .. py:method:: compute(model, data)


   .. py:attribute:: height
      :value: 800



   .. py:attribute:: label_names
      :value: None



   .. py:attribute:: legend_title
      :value: 'Label'



   .. py:attribute:: n_components
      :value: 2



   .. py:attribute:: output_filename


   .. py:attribute:: seed
      :value: 42



   .. py:attribute:: text_size
      :value: 12



   .. py:attribute:: title
      :value: None



   .. py:attribute:: width
      :value: 800



   .. py:attribute:: x_axis_title
      :value: 'x'



   .. py:attribute:: y_axis_title
      :value: 'y'



.. py:class:: _ModelAnalysis(path = None)

   Main interface for model analysis. A model analysis is a post-training
   analysis that can be run on a trained model to generate insights about the
   model's performance. It has a `path` attribute that specifies the directory
   where the analysis results will be saved. The `compute` method should be
   implemented by subclasses to perform the actual analysis. All insights
   generated by the analysis should be saved in the `path` directory.
   Note that, differently from `Metric`, `_ModelAnalysis` does not return any
   value. Instead, the results of the analysis should be saved in the `path`
   directory. All subclasses of `_ModelAnalysis` should implement the `compute`
   method. Inside a pipeline the path will be automatically set to the
   `pipeline.log_dir` attribute.


   .. py:attribute:: _path
      :value: None



   .. py:method:: compute(model, data)
      :abstractmethod:



   .. py:property:: path


