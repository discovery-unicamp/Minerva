minerva.losses.xtent_loss
=========================

.. py:module:: minerva.losses.xtent_loss


Classes
-------

.. autoapisummary::

   minerva.losses.xtent_loss.NTXentLoss


Module Contents
---------------

.. py:class:: NTXentLoss(temperature)

   Bases: :py:obj:`torch.nn.modules.loss._Loss`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   The constructor of the NTXentLoss class.

   Parameters
   ----------
   - temperature: float
       The temperature of the softmax function



   .. py:attribute:: criterion


   .. py:attribute:: eps
      :value: 1e-08



   .. py:method:: forward(y_0, y_1)

      Forward pass of the NTXentLoss class.

      Based on Lightly SSL's implementation.

      Parameters
      ----------
      - y_0: Tensor
          The first tensor to be compared
      - y_1: Tensor
          The second tensor to be compared

      Returns
      -------
      - Tensor
          The loss value



   .. py:attribute:: temperature


