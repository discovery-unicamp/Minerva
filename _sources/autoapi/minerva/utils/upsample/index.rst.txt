minerva.utils.upsample
======================

.. py:module:: minerva.utils.upsample


Classes
-------

.. autoapisummary::

   minerva.utils.upsample.Upsample


Functions
---------

.. autoapisummary::

   minerva.utils.upsample.resize


Module Contents
---------------

.. py:class:: Upsample(size=None, scale_factor=None, mode='nearest', align_corners=None)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   Initialize internal Module state, shared by both nn.Module and ScriptModule.


   .. py:attribute:: align_corners
      :value: None



   .. py:method:: forward(x)


   .. py:attribute:: mode
      :value: 'nearest'



   .. py:attribute:: size
      :value: None



.. py:function:: resize(input, size=None, scale_factor=None, mode='nearest', align_corners=None, warning=True)

