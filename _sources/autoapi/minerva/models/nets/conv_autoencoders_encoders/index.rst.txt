minerva.models.nets.conv_autoencoders_encoders
==============================================

.. py:module:: minerva.models.nets.conv_autoencoders_encoders


Classes
-------

.. autoapisummary::

   minerva.models.nets.conv_autoencoders_encoders.ConvTAEDecoder
   minerva.models.nets.conv_autoencoders_encoders.ConvTAEEncoder


Module Contents
---------------

.. py:class:: ConvTAEDecoder(target_channels = 6, target_time_steps = 60, encoding_size = 256, fc_num_layers = 3, conv_num_layers = 3, conv_mid_channels = 12, conv_kernel = 5, conv_padding = 0)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   A decoder for a simple convolutional autodecoder.

   Parameters
   ----------
   target_channels : int, optional
       Number of channels of the output that the model should target to, by default 6
   target_time_steps : int, optional
       Number of time steps of the output that the model should target to, by default 60
   encoding_size : int, optional
       Size of the data representation received by the model, by default 256
   fc_num_layers : int, optional
       Number of fully connected layers, by default 3
   conv_num_layers : int, optional
       Number of convolutional layers, by default 3
   conv_mid_channels : int, optional
       Number of channels used for in_channels and out_channels in the convolutional layers, except in the last, by default 12
   conv_kernel : int, optional
       Size of the convolutional kernel, by default 5
   conv_padding : int, optional
       Padding used in the convolutional layers, by default 0


   .. py:attribute:: conv_kernel
      :value: 5



   .. py:attribute:: conv_mid_channels
      :value: 12



   .. py:attribute:: conv_num_layers
      :value: 3



   .. py:attribute:: conv_padding
      :value: 0



   .. py:attribute:: encoding_size
      :value: 256



   .. py:attribute:: fc_num_layers
      :value: 3



   .. py:method:: forward(x)


   .. py:attribute:: model


   .. py:attribute:: target_channels
      :value: 6



   .. py:attribute:: target_time_steps
      :value: 60



.. py:class:: ConvTAEEncoder(in_channels = 6, time_steps = 60, encoding_size = 256, fc_num_layers = 3, conv_num_layers = 3, conv_mid_channels = 12, conv_kernel = 5, conv_padding = 0)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   An encoder for a simple convolutional autoencoder.

   Parameters
   ----------
   in_channels : int, optional
       Number of channels of the input that the model receives, by default 2
   time_steps : int, optional
       Number of time steps of the input that the model receives, by default 60
   encoding_size : int, optional
       Size of the data representation generated by the model, by default 256
   fc_num_layers : int, optional
       Number of fully connected layers, by default 3
   conv_num_layers : int, optional
       Number of convolutional layers, by default 3
   conv_mid_channels : int, optional
       Number of channels used for in_channels and out_channels in the convolutional layers, except in the first, by default 12
   conv_kernel : int, optional
       Size of the convolutional kernel, by default 5
   conv_padding : int, optional
       Padding used in the convolutional layers, by default 0


   .. py:attribute:: conv_kernel
      :value: 5



   .. py:attribute:: conv_mid_channels
      :value: 12



   .. py:attribute:: conv_num_layers
      :value: 3



   .. py:attribute:: conv_padding
      :value: 0



   .. py:attribute:: encoding_size
      :value: 256



   .. py:attribute:: fc_num_layers
      :value: 3



   .. py:method:: forward(x)


   .. py:attribute:: in_channels
      :value: 6



   .. py:attribute:: model


   .. py:attribute:: time_steps
      :value: 60



