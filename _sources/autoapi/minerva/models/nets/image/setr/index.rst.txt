minerva.models.nets.image.setr
==============================

.. py:module:: minerva.models.nets.image.setr


Classes
-------

.. autoapisummary::

   minerva.models.nets.image.setr.SETR_PUP
   minerva.models.nets.image.setr._SETRMLAHead
   minerva.models.nets.image.setr._SETRUPHead
   minerva.models.nets.image.setr._SetR_PUP


Module Contents
---------------

.. py:class:: SETR_PUP(image_size = 512, patch_size = 16, num_layers = 24, num_heads = 16, hidden_dim = 1024, mlp_dim = 4096, encoder_dropout = 0.1, num_classes = 1000, norm_layer = None, decoder_channels = 256, num_convs = 4, up_scale = 2, kernel_size = 3, align_corners = False, decoder_dropout = 0.1, conv_norm = None, conv_act = None, interpolate_mode = 'bilinear', loss_fn = None, optimizer_type = None, optimizer_params = None, train_metrics = None, val_metrics = None, test_metrics = None, aux_output = True, aux_output_layers = None, aux_weights = None, load_backbone_path = None, freeze_backbone_on_load = True, learning_rate = 0.001, loss_weights = None, original_resolution = None, head_lr_factor = 1.0, test_engine = None)

   Bases: :py:obj:`lightning.pytorch.LightningModule`


   SET-R model with PUP head for image segmentation.

   Methods
   -------
   forward(x: torch.Tensor) -> torch.Tensor
       Forward pass of the model.
   _compute_metrics(y_hat: torch.Tensor, y: torch.Tensor, step_name: str)
       Compute metrics for the given step.
   _loss_func(y_hat: Union[torch.Tensor, Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]], y: torch.Tensor) -> torch.Tensor
       Calculate the loss between the output and the input data.
   _single_step(batch: torch.Tensor, batch_idx: int, step_name: str)
       Perform a single step of the training/validation loop.
   training_step(batch: torch.Tensor, batch_idx: int)
       Perform a single training step.
   validation_step(batch: torch.Tensor, batch_idx: int)
       Perform a single validation step.
   test_step(batch: torch.Tensor, batch_idx: int)
       Perform a single test step.
   predict_step(batch: torch.Tensor, batch_idx: int, dataloader_idx: Optional[int] = None)
       Perform a single prediction step.
   load_backbone(path: str, freeze: bool = False)
       Load a pre-trained backbone.
   configure_optimizers()
       Configure the optimizer for the model.
   create_from_dict(config: Dict) -> "SETR_PUP"
       Create an instance of SETR_PUP from a configuration dictionary.

   Initialize the SETR model with Progressive Upsampling Head.

   Parameters
   ----------
   image_size : Union[int, Tuple[int, int]], optional
       Size of the input image, by default 512.
   patch_size : int, optional
       Size of the patches to be extracted from the input image, by
       default 16.
   num_layers : int, optional
       Number of transformer layers, by default 24.
   num_heads : int, optional
       Number of attention heads, by default 16.
   hidden_dim : int, optional
       Dimension of the hidden layer, by default 1024.
   mlp_dim : int, optional
       Dimension of the MLP layer, by default 4096.
   encoder_dropout : float, optional
       Dropout rate for the encoder, by default 0.1.
   num_classes : int, optional
       Number of output classes, by default 1000.
   norm_layer : Optional[nn.Module], optional
       Normalization layer, by default None.
   decoder_channels : int, optional
       Number of channels in the decoder, by default 256.
   num_convs : int, optional
       Number of convolutional layers in the decoder, by default 4.
   up_scale : int, optional
       Upscaling factor for the decoder, by default 2.
   kernel_size : int, optional
       Kernel size for the convolutional layers, by default 3.
   align_corners : bool, optional
       Whether to align corners when interpolating, by default False.
   decoder_dropout : float, optional
       Dropout rate for the decoder, by default 0.1.
   conv_norm : Optional[nn.Module], optional
       Normalization layer for the convolutional layers, by default None.
   conv_act : Optional[nn.Module], optional
       Activation function for the convolutional layers, by default None.
   interpolate_mode : str, optional
       Interpolation mode, by default "bilinear".
   loss_fn : Optional[nn.Module], optional
       Loss function, when None defaults to nn.CrossEntropyLoss, by
       default None.
   optimizer_type : Optional[type], optional
       Type of optimizer, by default None.
   optimizer_params : Optional[Dict], optional
       Parameters for the optimizer, by default None.
   train_metrics : Optional[Dict[str, Metric]], optional
       Metrics for training, by default None.
   val_metrics : Optional[Dict[str, Metric]], optional
       Metrics for validation, by default None.
   test_metrics : Optional[Dict[str, Metric]], optional
       Metrics for testing, by default None.
   aux_output : bool, optional
       Whether to use auxiliary outputs, by default True.
   aux_output_layers : list[int], optional
       Layers for auxiliary outputs, when None it defaults to [9, 14, 19].
   aux_weights : list[float], optional
       Weights for auxiliary outputs, when None it defaults [0.3, 0.3, 0.3].
   load_backbone_path : Optional[str], optional
       Path to load the backbone model, by default None.
   freeze_backbone_on_load : bool, optional
       Whether to freeze the backbone model on load, by default True.
   learning_rate : float, optional
       Learning rate, by default 1e-3.
   loss_weights : Optional[list[float]], optional
       Weights for the loss function, by default None.
   original_resolution : Optional[Tuple[int, int]], optional
       The original resolution of the input image in the pre-training
       weights. When None, positional embeddings will not be interpolated.
       Defaults to None.
   head_lr_factor : float, optional
       Learning rate factor for the head. used if you need different
       learning rates for backbone and prediction head, by default 1.0.
   test_engine : Optional[_Engine], optional
       Engine used for test and validation steps. When None, behavior of
       all steps, training, testing and validation is the same, by default None.


   .. py:method:: _compute_metrics(y_hat, y, step_name)


   .. py:method:: _loss_func(y_hat, y)

      Calculate the loss between the output and the input data.

      Parameters
      ----------
      y_hat : torch.Tensor
          The output data from the forward pass.
      y : torch.Tensor
          The input data/label.

      Returns
      -------
      torch.Tensor
          The loss value.



   .. py:method:: _single_step(batch, batch_idx, step_name)

      Perform a single step of the training/validation loop.

      Parameters
      ----------
      batch : torch.Tensor
          The input data.
      batch_idx : int
          The index of the batch.
      step_name : str
          The name of the step, either "train" or "val".

      Returns
      -------
      torch.Tensor
          The loss value.



   .. py:attribute:: aux_weights
      :value: None



   .. py:method:: configure_optimizers()

      Choose what optimizers and learning-rate schedulers to use in your optimization. Normally you'd need one.
      But in the case of GANs or similar you might have multiple. Optimization with multiple optimizers only works in
      the manual optimization mode.

      Return:
          Any of these 6 options.

          - **Single optimizer**.
          - **List or Tuple** of optimizers.
          - **Two lists** - The first list has multiple optimizers, and the second has multiple LR schedulers
            (or multiple ``lr_scheduler_config``).
          - **Dictionary**, with an ``"optimizer"`` key, and (optionally) a ``"lr_scheduler"``
            key whose value is a single LR scheduler or ``lr_scheduler_config``.
          - **None** - Fit will run without any optimizer.

      The ``lr_scheduler_config`` is a dictionary which contains the scheduler and its associated configuration.
      The default configuration is shown below.

      .. code-block:: python

          lr_scheduler_config = {
              # REQUIRED: The scheduler instance
              "scheduler": lr_scheduler,
              # The unit of the scheduler's step size, could also be 'step'.
              # 'epoch' updates the scheduler on epoch end whereas 'step'
              # updates it after a optimizer update.
              "interval": "epoch",
              # How many epochs/steps should pass between calls to
              # `scheduler.step()`. 1 corresponds to updating the learning
              # rate after every epoch/step.
              "frequency": 1,
              # Metric to monitor for schedulers like `ReduceLROnPlateau`
              "monitor": "val_loss",
              # If set to `True`, will enforce that the value specified 'monitor'
              # is available when the scheduler is updated, thus stopping
              # training if not found. If set to `False`, it will only produce a warning
              "strict": True,
              # If using the `LearningRateMonitor` callback to monitor the
              # learning rate progress, this keyword can be used to specify
              # a custom logged name
              "name": None,
          }

      When there are schedulers in which the ``.step()`` method is conditioned on a value, such as the
      :class:`torch.optim.lr_scheduler.ReduceLROnPlateau` scheduler, Lightning requires that the
      ``lr_scheduler_config`` contains the keyword ``"monitor"`` set to the metric name that the scheduler
      should be conditioned on.

      .. testcode::

          # The ReduceLROnPlateau scheduler requires a monitor
          def configure_optimizers(self):
              optimizer = Adam(...)
              return {
                  "optimizer": optimizer,
                  "lr_scheduler": {
                      "scheduler": ReduceLROnPlateau(optimizer, ...),
                      "monitor": "metric_to_track",
                      "frequency": "indicates how often the metric is updated",
                      # If "monitor" references validation metrics, then "frequency" should be set to a
                      # multiple of "trainer.check_val_every_n_epoch".
                  },
              }


          # In the case of two optimizers, only one using the ReduceLROnPlateau scheduler
          def configure_optimizers(self):
              optimizer1 = Adam(...)
              optimizer2 = SGD(...)
              scheduler1 = ReduceLROnPlateau(optimizer1, ...)
              scheduler2 = LambdaLR(optimizer2, ...)
              return (
                  {
                      "optimizer": optimizer1,
                      "lr_scheduler": {
                          "scheduler": scheduler1,
                          "monitor": "metric_to_track",
                      },
                  },
                  {"optimizer": optimizer2, "lr_scheduler": scheduler2},
              )

      Metrics can be made available to monitor by simply logging it using
      ``self.log('metric_to_track', metric_val)`` in your :class:`~lightning.pytorch.core.LightningModule`.

      Note:
          Some things to know:

          - Lightning calls ``.backward()`` and ``.step()`` automatically in case of automatic optimization.
          - If a learning rate scheduler is specified in ``configure_optimizers()`` with key
            ``"interval"`` (default "epoch") in the scheduler configuration, Lightning will call
            the scheduler's ``.step()`` method automatically in case of automatic optimization.
          - If you use 16-bit precision (``precision=16``), Lightning will automatically handle the optimizer.
          - If you use :class:`torch.optim.LBFGS`, Lightning handles the closure function automatically for you.
          - If you use multiple optimizers, you will have to switch to 'manual optimization' mode and step them
            yourself.
          - If you need to control how often the optimizer steps, override the :meth:`optimizer_step` hook.




   .. py:method:: create_from_dict(config)
      :staticmethod:



   .. py:method:: forward(x)

      Same as :meth:`torch.nn.Module.forward`.

      Args:
          *args: Whatever you decide to pass into the forward method.
          **kwargs: Keyword arguments are also possible.

      Return:
          Your model's output




   .. py:attribute:: head_lr_factor
      :value: 1.0



   .. py:attribute:: learning_rate
      :value: 0.001



   .. py:method:: load_backbone(path, freeze = False)


   .. py:attribute:: loss_fn
      :value: None



   .. py:attribute:: metrics


   .. py:attribute:: model


   .. py:attribute:: num_classes
      :value: 1000



   .. py:attribute:: optimizer_type
      :value: None



   .. py:method:: predict_step(batch, batch_idx, dataloader_idx = None)

      Step function called during :meth:`~lightning.pytorch.trainer.trainer.Trainer.predict`. By default, it calls
      :meth:`~lightning.pytorch.core.LightningModule.forward`. Override to add any processing logic.

      The :meth:`~lightning.pytorch.core.LightningModule.predict_step` is used
      to scale inference on multi-devices.

      To prevent an OOM error, it is possible to use :class:`~lightning.pytorch.callbacks.BasePredictionWriter`
      callback to write the predictions to disk or database after each batch or on epoch end.

      The :class:`~lightning.pytorch.callbacks.BasePredictionWriter` should be used while using a spawn
      based accelerator. This happens for ``Trainer(strategy="ddp_spawn")``
      or training on 8 TPU cores with ``Trainer(accelerator="tpu", devices=8)`` as predictions won't be returned.

      Args:
          batch: The output of your data iterable, normally a :class:`~torch.utils.data.DataLoader`.
          batch_idx: The index of this batch.
          dataloader_idx: The index of the dataloader that produced this batch.
              (only if multiple dataloaders used)

      Return:
          Predicted output (optional).

      Example ::

          class MyModel(LightningModule):

              def predict_step(self, batch, batch_idx, dataloader_idx=0):
                  return self(batch)

          dm = ...
          model = MyModel()
          trainer = Trainer(accelerator="gpu", devices=2)
          predictions = trainer.predict(model, dm)




   .. py:attribute:: test_engine
      :value: None



   .. py:method:: test_step(batch, batch_idx)

      Operates on a single batch of data from the test set. In this step you'd normally generate examples or
      calculate anything of interest such as accuracy.

      Args:
          batch: The output of your data iterable, normally a :class:`~torch.utils.data.DataLoader`.
          batch_idx: The index of this batch.
          dataloader_idx: The index of the dataloader that produced this batch.
              (only if multiple dataloaders used)

      Return:
          - :class:`~torch.Tensor` - The loss tensor
          - ``dict`` - A dictionary. Can include any keys, but must include the key ``'loss'``.
          - ``None`` - Skip to the next batch.

      .. code-block:: python

          # if you have one test dataloader:
          def test_step(self, batch, batch_idx): ...


          # if you have multiple test dataloaders:
          def test_step(self, batch, batch_idx, dataloader_idx=0): ...

      Examples::

          # CASE 1: A single test dataset
          def test_step(self, batch, batch_idx):
              x, y = batch

              # implement your own
              out = self(x)
              loss = self.loss(out, y)

              # log 6 example images
              # or generated text... or whatever
              sample_imgs = x[:6]
              grid = torchvision.utils.make_grid(sample_imgs)
              self.logger.experiment.add_image('example_images', grid, 0)

              # calculate acc
              labels_hat = torch.argmax(out, dim=1)
              test_acc = torch.sum(y == labels_hat).item() / (len(y) * 1.0)

              # log the outputs!
              self.log_dict({'test_loss': loss, 'test_acc': test_acc})

      If you pass in multiple test dataloaders, :meth:`test_step` will have an additional argument. We recommend
      setting the default value of 0 so that you can quickly switch between single and multiple dataloaders.

      .. code-block:: python

          # CASE 2: multiple test dataloaders
          def test_step(self, batch, batch_idx, dataloader_idx=0):
              # dataloader_idx tells you which dataset this is.
              ...

      Note:
          If you don't need to test you don't need to implement this method.

      Note:
          When the :meth:`test_step` is called, the model has been put in eval mode and
          PyTorch gradients have been disabled. At the end of the test epoch, the model goes back
          to training mode and gradients are enabled.




   .. py:method:: training_step(batch, batch_idx)

      Here you compute and return the training loss and some additional metrics for e.g. the progress bar or
      logger.

      Args:
          batch: The output of your data iterable, normally a :class:`~torch.utils.data.DataLoader`.
          batch_idx: The index of this batch.
          dataloader_idx: The index of the dataloader that produced this batch.
              (only if multiple dataloaders used)

      Return:
          - :class:`~torch.Tensor` - The loss tensor
          - ``dict`` - A dictionary which can include any keys, but must include the key ``'loss'`` in the case of
            automatic optimization.
          - ``None`` - In automatic optimization, this will skip to the next batch (but is not supported for
            multi-GPU, TPU, or DeepSpeed). For manual optimization, this has no special meaning, as returning
            the loss is not required.

      In this step you'd normally do the forward pass and calculate the loss for a batch.
      You can also do fancier things like multiple forward passes or something model specific.

      Example::

          def training_step(self, batch, batch_idx):
              x, y, z = batch
              out = self.encoder(x)
              loss = self.loss(out, x)
              return loss

      To use multiple optimizers, you can switch to 'manual optimization' and control their stepping:

      .. code-block:: python

          def __init__(self):
              super().__init__()
              self.automatic_optimization = False


          # Multiple optimizers (e.g.: GANs)
          def training_step(self, batch, batch_idx):
              opt1, opt2 = self.optimizers()

              # do training_step with encoder
              ...
              opt1.step()
              # do training_step with decoder
              ...
              opt2.step()

      Note:
          When ``accumulate_grad_batches`` > 1, the loss returned here will be automatically
          normalized by ``accumulate_grad_batches`` internally.




   .. py:method:: validation_step(batch, batch_idx)

      Operates on a single batch of data from the validation set. In this step you'd might generate examples or
      calculate anything of interest like accuracy.

      Args:
          batch: The output of your data iterable, normally a :class:`~torch.utils.data.DataLoader`.
          batch_idx: The index of this batch.
          dataloader_idx: The index of the dataloader that produced this batch.
              (only if multiple dataloaders used)

      Return:
          - :class:`~torch.Tensor` - The loss tensor
          - ``dict`` - A dictionary. Can include any keys, but must include the key ``'loss'``.
          - ``None`` - Skip to the next batch.

      .. code-block:: python

          # if you have one val dataloader:
          def validation_step(self, batch, batch_idx): ...


          # if you have multiple val dataloaders:
          def validation_step(self, batch, batch_idx, dataloader_idx=0): ...

      Examples::

          # CASE 1: A single validation dataset
          def validation_step(self, batch, batch_idx):
              x, y = batch

              # implement your own
              out = self(x)
              loss = self.loss(out, y)

              # log 6 example images
              # or generated text... or whatever
              sample_imgs = x[:6]
              grid = torchvision.utils.make_grid(sample_imgs)
              self.logger.experiment.add_image('example_images', grid, 0)

              # calculate acc
              labels_hat = torch.argmax(out, dim=1)
              val_acc = torch.sum(y == labels_hat).item() / (len(y) * 1.0)

              # log the outputs!
              self.log_dict({'val_loss': loss, 'val_acc': val_acc})

      If you pass in multiple val dataloaders, :meth:`validation_step` will have an additional argument. We recommend
      setting the default value of 0 so that you can quickly switch between single and multiple dataloaders.

      .. code-block:: python

          # CASE 2: multiple validation dataloaders
          def validation_step(self, batch, batch_idx, dataloader_idx=0):
              # dataloader_idx tells you which dataset this is.
              ...

      Note:
          If you don't need to validate you don't need to implement this method.

      Note:
          When the :meth:`validation_step` is called, the model has been put in eval mode
          and PyTorch gradients have been disabled. At the end of validation,
          the model goes back to training mode and gradients are enabled.




.. py:class:: _SETRMLAHead(channels, conv_norm, conv_act, in_channels, out_channels, num_classes, mla_channels = 128, up_scale = 4, kernel_size = 3, align_corners = True, dropout = 0.1, threshold = None)

   Bases: :py:obj:`torch.nn.Module`


   Multi level feature aggretation head of SETR (as in
   https://arxiv.org/pdf/2012.15840.pdf)

   Note: This has not been tested yet!

   Initialize internal Module state, shared by both nn.Module and ScriptModule.


   .. py:attribute:: cls_seg


   .. py:attribute:: dropout


   .. py:method:: forward(x)


   .. py:attribute:: num_classes


   .. py:attribute:: out_channels


   .. py:attribute:: threshold
      :value: None



   .. py:attribute:: up_convs


.. py:class:: _SETRUPHead(channels, in_channels, num_classes, norm_layer, conv_norm, conv_act, num_convs, up_scale, kernel_size, align_corners, dropout, interpolate_mode)

   Bases: :py:obj:`torch.nn.Module`


   Naive upsampling head and Progressive upsampling head of SETR
   (as in https://arxiv.org/pdf/2012.15840.pdf).

   The SETR PUP Head.

   Parameters
   ----------
   channels : int
       Number of output channels.
   in_channels : int
       Number of input channels.
   num_classes : int
       Number of output classes.
   norm_layer : nn.Module
       Normalization layer.
   conv_norm : nn.Module
       Convolutional normalization layer.
   conv_act : nn.Module
       Convolutional activation layer.
   num_convs : int
       Number of convolutional layers.
   up_scale : int
       Upsampling scale factor.
   kernel_size : int
       Kernel size for convolutional layers.
   align_corners : bool
       Whether to align corners during upsampling.
   dropout : float
       Dropout rate.
   interpolate_mode : str
       Interpolation mode for upsampling.

   Raises
   ------
   AssertionError
       If kernel_size is not 1 or 3.


   .. py:attribute:: cls_seg


   .. py:attribute:: dropout


   .. py:method:: forward(x)


   .. py:attribute:: norm


   .. py:attribute:: num_classes


   .. py:attribute:: out_channels


   .. py:attribute:: up_convs


.. py:class:: _SetR_PUP(image_size, patch_size, num_layers, num_heads, hidden_dim, mlp_dim, num_convs, num_classes, decoder_channels, up_scale, encoder_dropout, kernel_size, decoder_dropout, norm_layer, interpolate_mode, conv_norm, conv_act, align_corners, aux_output, aux_output_layers, original_resolution)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   Initializes the SETR PUP head.

   Parameters
   ----------
   image_size : int or Tuple[int, int]
       The size of the input image.
   patch_size : int
       The size of each patch in the input image.
   num_layers : int
       The number of layers in the transformer encoder.
   num_heads : int
       The number of attention heads in the transformer encoder.
   hidden_dim : int
       The hidden dimension of the transformer encoder.
   mlp_dim : int
       The dimension of the feed-forward network in the transformer encoder
   num_convs : int
       The number of convolutional layers in the decoder.
   num_classes : int
       The number of output classes.
   decoder_channels : int
       The number of channels in the decoder.
   up_scale : int
       The scale factor for upsampling in the decoder.
   encoder_dropout : float
       The dropout rate for the transformer encoder.
   kernel_size : int
       The kernel size for the convolutional layers in the decoder.
   decoder_dropout : float
       The dropout rate for the decoder.
   norm_layer : nn.Module
       The normalization layer to be used.
   interpolate_mode : str
       The mode for interpolation during upsampling.
   conv_norm : nn.Module
       The normalization layer to be used in the decoder convolutional
       layers.
   conv_act : nn.Module
       The activation function to be used in the decoder convolutional
       layers.
   align_corners : bool
       Whether to align corners during upsampling.
   aux_output: bool
       Whether to use auxiliary outputs. If True, aux_output_layers must
       be provided.
   aux_output_layers: List[int], optional
       The layers to use for auxiliary outputs. Must have exacly 3 values.
   original_resolution: Tuple[int, int], optional
       The original resolution of the input image in the pre-training
       weights. When None, positional embeddings will not be interpolated.



   .. py:attribute:: aux_head1


   .. py:attribute:: aux_head2


   .. py:attribute:: aux_head3


   .. py:attribute:: aux_output


   .. py:attribute:: aux_output_layers


   .. py:attribute:: decoder


   .. py:attribute:: encoder


   .. py:method:: forward(x)


   .. py:method:: load_backbone(path, freeze = False)


