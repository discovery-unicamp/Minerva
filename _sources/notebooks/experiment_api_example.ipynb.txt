{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Minerva Experimental Pipeline\n",
    "\n",
    "One of Minerva’s core features are regarding reproducibility and experiment management. In this notebook, we will show how to use the `Experiment` class run and manage experiments in a structured way. \n",
    "This class implements a Minerva pipeline that allows you to run experiments in a reproducible manner, while also providing a convenient interface for managing and analyzing the results.\n",
    "\n",
    "\n",
    "We will cover the following topics:\n",
    "\n",
    "1. **The ModelInstantiator Interface**: Learn how to instantiate models for supervised learning, fine-tuning, or evaluation in a consistent and modular way.\n",
    "\n",
    "2. **Attaching Metadata**: Add informative metadata to your experiments, such as model and dataset names.\n",
    "\n",
    "3. **Using the Experiment Class**: Understand how to run, save, and reload experiments using Minerva’s `Experiment` class, which provides a unified interface for experiment lifecycle management.\n",
    "\n",
    "4. **Loading and Analyzing Results**: Retrieve predictions, metrics, and other results from completed experiments for analysis and comparison.\n",
    "\n",
    "\n",
    "In this example, we will create a Experiment using DeepLabV3 to perform semantic segmentation on F3 dataset, based on the [Seismic Facies Segmentation Getting Started example](seismic_facies_getting_started.ipynb). You may want to check that example first to understand the dataset and the model we are using here.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overview of the Experiment class\n",
    "\n",
    "The `Experiment` class is designed to manage the lifecycle of an experiment, from instantiation to execution, evaluation and result analysis. \n",
    "Thus, it can be used to:\n",
    "\n",
    "- Train or finetune a model.\n",
    "- Save checkpoints and logs, as well evaluate the model on different checkpoint states.\n",
    "- Save and load experiment results and predictions.\n",
    "\n",
    "Below is a diagram that illustrates the main components of the `Experiment` class and its interactions with other parts of the Minerva framework.\n",
    "There are several parameters, some of them are optional and some others were ommited in the diagram. We show the most important ones here.\n",
    "\n",
    "![Experiment class overview](../figures/experiment_diagram.png)\n",
    "\n",
    "The `Experiment` class serves as a high-level interface for managing supervised learning and fine-tuning workflows in Minerva. It integrates model configuration, data handling, training logic, evaluation metrics, and result logging into a unified structure.\n",
    "\n",
    "The class is composed of several key components:\n",
    "\n",
    "* **experiment_name** (`str`): A unique identifier for the experiment. This is used to create a dedicated directory where logs, results, and predictions will be saved.\n",
    "\n",
    "* **model_config** (`ModelConfig`): An instance of the `ModelConfig` class containing all necessary configuration details for model creation—whether initializing from scratch or fine-tuning.\n",
    "\n",
    "* **data_module** (`MinervaDataModule`): An instance of the `MinervaDataModule` class that provides the training, validation, and test datasets.\n",
    "\n",
    "* **pretrained_backbone_path** (`str`, optional): A file path to a pretrained backbone model. If provided, the model is initialized with weights from this checkpoint via `ModelInstantiator.create_model_and_load_backbone`, enabling fine-tuning. If not provided, the model is initialized from scratch using `ModelInstantiator.create_model_randomly_initialized`, which supports training from the ground up.\n",
    "\n",
    "* **root_log_dir** (`str`, optional): The root directory where experiment-related artifacts (logs, results, checkpoints, etc.) will be saved.\n",
    "\n",
    "* **execution_id** (`str` or `int`, optional): A unique identifier for the specific execution run of the experiment. Useful for distinguishing between multiple runs of the same experiment.\n",
    "\n",
    "* **checkpoint_metrics** (`List[Dict]`, optional): A list of dictionaries defining model checkpointing behavior. It will be used to create lightning `ModelCheckpoint` callbacks. Each dictionary must include:\n",
    "\n",
    "  * `\"monitor\"`: The metric to monitor (e.g., `\"val_loss\"`).\n",
    "  * `\"mode\"`: `\"min\"` or `\"max\"`, indicating whether the monitored metric should be minimized or maximized.\n",
    "  * `\"filename\"`: The filename for saving the checkpoint.\n",
    "  * If `\"monitor\"` is `None`, the checkpoint will correspond to the final model state. Defaults to `None`.\n",
    "\n",
    "* **max_epochs** (`int`, optional): The maximum number of training epochs. Training will terminate once this limit is reached.\n",
    "\n",
    "* **evaluation_metrics** (`Dict[str, torchmetrics.Metric]`, optional): A dictionary of evaluation metrics applied globally across the entire dataset. Each metric is computed on the aggregate predictions.\n",
    "\n",
    "* **per_sample_evaluation_metrics** (`Dict[str, torchmetrics.Metric]`, optional): A dictionary of metrics evaluated individually per sample. Useful for tasks requiring per-instance performance monitoring.\n",
    "\n",
    "* **save_predictions** (`bool`, default=`True`): Whether to save the predictions generated during evaluation. Saved predictions will be stored in the experiment directory.\n",
    "\n",
    "* **save_results** (`bool`, default=`True`): If enabled, the final results will be saved to the log directory.\n",
    "\n",
    "* **add_last_checkpoint** (`bool`, default=`True`): If `True`, the last model checkpoint (i.e., the final state after training) will be included in the checkpoint list, even if it's not associated with a specific monitored metric.\n",
    "\n",
    "\n",
    "Minerva's `Experiment` class is built to support both training from scratch and fine-tuning workflows. By toggling the `pretrained_backbone_path`, users can seamlessly switch between initializing models with pretrained weights or random parameters. This flexibility makes the class adaptable to a wide range of machine learning scenarios."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The `ModelInstantiator` Interface\n",
    "\n",
    "The `ModelInstantiator` interface is a central component in the Minerva Experimental Pipeline for enabling flexible and consistent model creation across supervised learning and fine-tuning workflows. It serves as an **abstract class for lazy model instantiation**, allowing models to be constructed only when needed, with or without pretrained components.\n",
    "\n",
    "Minerva assumes that all models conform to the following modular design:\n",
    "\n",
    "```\n",
    "+-------------------------------+\n",
    "|     Model (LightningModule)   |\n",
    "|                               |\n",
    "|     +-----------------+       |\n",
    "|     |    Backbone     |       |   --> Feature extractor\n",
    "|     +-----------------+       |\n",
    "|             |                 |\n",
    "|             v                 |\n",
    "|        +----------+           |\n",
    "|        |   Head   |           |   --> Task-specific layers\n",
    "|        +----------+           |\n",
    "+-------------------------------+\n",
    "```\n",
    "\n",
    "This structure separates the **backbone** (typically a pretrained feature extractor) from the **head** (task-specific layers), facilitating easy reuse and fine-tuning.\n",
    "\n",
    "\n",
    "The `ModelInstantiator` interface defines a standardized mechanism to build models across three primary scenarios:\n",
    "\n",
    "1. **Training from scratch**: Both the backbone and head are randomly initialized.\n",
    "2. **Fine-tuning**: A pretrained backbone is loaded from a checkpoint, and the head is newly initialized for the target task.\n",
    "3. **Inference/Evaluation**: The full model (backbone and head) is loaded from a previously saved checkpoint.\n",
    "\n",
    "To support this integration, each model must implement a `ModelInstantiator` subclass that defines the following methods:\n",
    "\n",
    "| Method                                                     | Parameters                         | Description                                                                                                                                             |\n",
    "| ---------------------------------------------------------- | ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n",
    "| `create_model_randomly_initialized()`                      | None                               | Instantiates a model with both backbone and head **randomly initialized**. Used when training from scratch.                                             |\n",
    "| `create_model_and_load_backbone(backbone_checkpoint_path)` | `backbone_checkpoint_path` (`str`) | Instantiates a model for **fine-tuning**. Loads the backbone from the specified checkpoint and attaches a **new head** initialized for the target task. |\n",
    "| `load_model_from_checkpoint(checkpoint_path)`              | `checkpoint_path` (`str`)          | Loads the **entire model** (both backbone and head) from a checkpoint. Typically used for **evaluation, inference, or resuming training**.              |\n",
    "\n",
    "\n",
    "> **NOTE**: If `pretrained_backbone_path` is to `Experiment` constructor, the `create_model_and_load_backbone` method will be called with the provided path as the `backbone_checkpoint_path` argument. Else the `create_model_randomly_initialized` method will be called.\n",
    "\n",
    "\n",
    "### The `ModelConfig` Class\n",
    "\n",
    "The `ModelConfig` class serves as a high-level configuration object for managing model setup within the Minerva Experimental Pipeline. Instead of passing a model instance directly, the `Experiment` class expects a `ModelConfig` instance that encapsulates both **model creation logic** and **descriptive metadata**.\n",
    "\n",
    "`ModelConfig` includes two key components:\n",
    "\n",
    "1. **ModelInstantiator**: Responsible for **creating the model instance** in different scenarios—training from scratch, fine-tuning with a pretrained backbone, or loading from a checkpoint for evaluation. This interface enables lazy and flexible model instantiation, as described in the previous section.\n",
    "\n",
    "2. **ModelInformation**: A metadata container that holds descriptive information about the model. This includes the model's name, type, version, and any other relevant details that may be useful for logging, tracking, or analysis.\n",
    "\n",
    "In `ModelInformation`, the only required field is `name`, which serves as the unique identifier for the model. All other fields are optional and can be used to provide additional context. While optional in the `Experiment` class, subclasses may require certain fields in `ModelInformation` to be set, depending on the specific logic of the training or evaluation workflow.\n",
    "\n",
    "\n",
    "### Experiment Logging\n",
    "\n",
    "The `Experiment` class provides a structured way to save and log various artifacts related to the experiment. \n",
    "In general, for each execution of the experiment the following directory structure is created:\n",
    "\n",
    "```\n",
    "root_log_dir/\n",
    "└── experiment_name/\n",
    "   └── data_module.name\n",
    "        └── model_information.name\n",
    "           └── execution_id/\n",
    "              ├── metrics.csv\n",
    "              ├── checkpoints/\n",
    "              ├── predictions/\n",
    "              └── results/\n",
    "``` \n",
    "\n",
    "- **metrics.csv**: A CSV file containing the metrics collected during training. This file serves as a summary of the experiment's performance, logged with Lightning logger (e.g., training loss, etc.). It can be used for further analysis or visualization.\n",
    "- **checkpoints/**: Contains model checkpoints saved during training. Each checkpoint corresponds to a specific state of the model, allowing for easy resumption or evaluation.\n",
    "- **predictions/**: Contains the predictions generated by the model during evaluation. This allows for easy access to the model's output for further analysis.\n",
    "- **results/**: Stores the final results of the experiment, including metrics and evaluation scores. This provides a summary of the experiment's performance.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: Using the `Experiment` Class for Seismic Facies Segmentation\n",
    "\n",
    "In this example, we'll demonstrate how to use the `Experiment` class in Minerva to perform semantic segmentation on the F3 dataset using the DeepLabV3 model. This builds upon the [Seismic Facies Segmentation Getting Started example](seismic_facies_getting_started.ipynb), so it's recommended to review that notebook first to understand the dataset and model components being reused here.\n",
    "\n",
    "In general, this notebook encapsulates the process of training a DeepLabV3 model on the F3 dataset from [Seismic Facies Segmentation Getting Started example](seismic_facies_getting_started.ipynb) into a structured pipeline using the `Experiment` class.\n",
    "\n",
    "The notebook is organized into the following sections:\n",
    "\n",
    "1. **Data Preparation**: Using the `MinervaDataModule` from the previous example\n",
    "2. **Model Setup**: Creating the `ModelInstantiator` and `ModelConfig` classes\n",
    "3. **Experiment Definition**: Building the custom `Experiment` class\n",
    "4. **Training and Evaluate Model**: Running the experiment\n",
    "5. **Managing Results and Lifecycle**: Saving and loading results, and also experiment lifecycle management\n",
    "6. **Cleanup**: Cleaning up the experiment directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import numpy as np\n",
    "import lightning as L\n",
    "import torch\n",
    "from torchmetrics import JaccardIndex\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from minerva.data.readers.patched_array_reader import NumpyArrayReader\n",
    "from minerva.transforms.transform import Repeat, Squeeze\n",
    "from minerva.data.datasets.base import SimpleDataset\n",
    "from minerva.models.nets.image.deeplabv3 import DeepLabV3\n",
    "from minerva.models.loaders import FromPretrained\n",
    "from minerva.utils.typing import PathLike\n",
    "from minerva.data.data_modules.base import MinervaDataModule\n",
    "from minerva.pipelines.experiment import ModelConfig, ModelInstantiator, ModelInformation, Experiment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Data Preparation\n",
    "\n",
    "In this section, we will create a `MinervaDataModule` for the F3 dataset, as we did in the [Seismic Facies Segmentation Getting Started example](seismic_facies_getting_started.ipynb), using data from the F3 dataset.\n",
    "\n",
    "Thus, it will:\n",
    "1. Create the train data and labels readers and create the train dataset.\n",
    "2. Create the test data and labels readers and create the test dataset.\n",
    "3. Create a `MinervaDataModule` instance with the train and test datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\n",
      "           📂 SimpleDataset Information            \n",
      "==================================================\n",
      "📌 Dataset Type: SimpleDataset\n",
      "   └── Reader 0: NumpyArrayReader(samples=401, shape=(1, 701, 255), dtype=float64)\n",
      "   │     └── Transform: Repeat(axis=0, n_repetitions=3)\n",
      "   └── Reader 1: NumpyArrayReader(samples=401, shape=(1, 701, 255), dtype=uint8)\n",
      "   │     └── Transform: None\n",
      "   │\n",
      "   └── Total Readers: 2\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "# 1. Create the train data and labels readers and create the train dataset.\n",
    "\n",
    "root_data_dir = Path(\"datasets/f3/data/\")\n",
    "\n",
    "# ----- TRAIN DATA AND LABEL READERS -----\n",
    "train_data_reader = NumpyArrayReader(\n",
    "    data=root_data_dir / \"train\" / \"train_seismic.npy\",\n",
    "    data_shape=(1, 701, 255),\n",
    ")\n",
    "\n",
    "train_labels_reader = NumpyArrayReader(\n",
    "    data=root_data_dir / \"train\" / \"train_labels.npy\",\n",
    "    data_shape=(1, 701, 255),\n",
    ")\n",
    "\n",
    "# ----- TRAIN DATASET -----\n",
    "train_dataset = SimpleDataset(\n",
    "    readers=[\n",
    "        train_data_reader,  # 1st reader is the data\n",
    "        train_labels_reader # 2nd reader is the labels\n",
    "    ],\n",
    "    transforms=[\n",
    "        Repeat(axis=0, n_repetitions=3),  # Transforms to first reader (data)\n",
    "        None                              # Transforms to second reader (labels)\n",
    "    ],\n",
    ")\n",
    "\n",
    "print(train_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\n",
      "           📂 SimpleDataset Information            \n",
      "==================================================\n",
      "📌 Dataset Type: SimpleDataset\n",
      "   └── Reader 0: NumpyArrayReader(samples=200, shape=(1, 701, 255), dtype=float64)\n",
      "   │     └── Transform: Repeat(axis=0, n_repetitions=3)\n",
      "   └── Reader 1: NumpyArrayReader(samples=200, shape=(1, 701, 255), dtype=uint8)\n",
      "   │     └── Transform: Squeeze(axis=0)\n",
      "   │\n",
      "   └── Total Readers: 2\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "# 2. Create the test data and labels readers and create the test dataset.\n",
    "\n",
    "# ----- TEST DATA AND LABEL READERS -----\n",
    "test_data_reader = NumpyArrayReader(\n",
    "    data=root_data_dir / \"test_once\" / \"test1_seismic.npy\",\n",
    "    data_shape=(1, 701, 255),\n",
    ")\n",
    "\n",
    "test_labels_reader = NumpyArrayReader(\n",
    "    data=root_data_dir / \"test_once\" / \"test1_labels.npy\",\n",
    "    data_shape=(1, 701, 255),\n",
    ")\n",
    "\n",
    "# ----- TEST DATASET -----\n",
    "test_dataset = SimpleDataset(\n",
    "    readers=[test_data_reader, test_labels_reader],\n",
    "    transforms=[Repeat(axis=0, n_repetitions=3), Squeeze(0)],\n",
    ")\n",
    "\n",
    "print(test_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\n",
      "                    🆔 F3_Dataset\n",
      "==================================================\n",
      "└── Predict Split: test\n",
      "📂 Datasets:\n",
      "   ├── Train Dataset:\n",
      "   │      ==================================================\n",
      "   │                 📂 SimpleDataset Information            \n",
      "   │      ==================================================\n",
      "   │      📌 Dataset Type: SimpleDataset\n",
      "   │         └── Reader 0: NumpyArrayReader(samples=401, shape=(1, 701, 255), dtype=float64)\n",
      "   │         │     └── Transform: Repeat(axis=0, n_repetitions=3)\n",
      "   │         └── Reader 1: NumpyArrayReader(samples=401, shape=(1, 701, 255), dtype=uint8)\n",
      "   │         │     └── Transform: None\n",
      "   │         │\n",
      "   │         └── Total Readers: 2\n",
      "   │      ==================================================\n",
      "   ├── Val Dataset:\n",
      "   │      None\n",
      "   └── Test Dataset:\n",
      "          ==================================================\n",
      "                     📂 SimpleDataset Information            \n",
      "          ==================================================\n",
      "          📌 Dataset Type: SimpleDataset\n",
      "             └── Reader 0: NumpyArrayReader(samples=200, shape=(1, 701, 255), dtype=float64)\n",
      "             │     └── Transform: Repeat(axis=0, n_repetitions=3)\n",
      "             └── Reader 1: NumpyArrayReader(samples=200, shape=(1, 701, 255), dtype=uint8)\n",
      "             │     └── Transform: Squeeze(axis=0)\n",
      "             │\n",
      "             └── Total Readers: 2\n",
      "          ==================================================\n",
      "\n",
      "🛠 **Dataloader Configurations:**\n",
      "   ├── Dataloader class: <class 'torch.utils.data.dataloader.DataLoader'>\n",
      "   ├── Train Dataloader Kwargs:\n",
      "         ├── batch_size: 16\n",
      "         ├── num_workers: 4\n",
      "         ├── shuffle: true\n",
      "         ├── drop_last: true\n",
      "   ├── Val Dataloader Kwargs:\n",
      "         ├── batch_size: 16\n",
      "         ├── num_workers: 4\n",
      "         ├── shuffle: false\n",
      "         ├── drop_last: false\n",
      "   └── Test Dataloader Kwargs:\n",
      "         ├── batch_size: 16\n",
      "         ├── num_workers: 4\n",
      "         ├── shuffle: false\n",
      "         ├── drop_last: false\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "# 3. Create a `MinervaDataModule` instance with the train and test datasets.\n",
    "\n",
    "# ---- DATA MODULE -----\n",
    "data_module = MinervaDataModule(\n",
    "    train_dataset=train_dataset,\n",
    "    test_dataset=test_dataset,\n",
    "    batch_size=16,\n",
    "    num_workers=4,\n",
    "    additional_train_dataloader_kwargs={\"drop_last\": True},\n",
    "    name=\"F3_Dataset\"\n",
    ")\n",
    "\n",
    "print(data_module)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Model Setup\n",
    "\n",
    "We will use DeepLabV3 as the model for semantic segmentation. As `Experiment` class requires a `ModelConfig` instance, we will create a custom `ModelInstantiator` and `ModelConfig` classes to encapsulate the model creation logic and metadata.\n",
    "\n",
    "Thus, we will:\n",
    "1. Create a custom `ModelInstantiator` class that implements the `create_model_randomly_initialized` and `load_model_from_checkpoint` methods. We will not implement the `create_model_and_load_backbone` method, as we will not use a pretrained backbone in this example.\n",
    "2. Create a `ModelInformation` instance to hold metadata about the model, such as its name and type.\n",
    "3. Create a custom `ModelConfig` class using the `ModelInstantiator` and `ModelInformation` instances. This class will be passed to the `Experiment` class to create the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ModelInstantiator for DeepLabV3\n",
    "\n",
    "Let's define a custom `ModelInstantiator` class for the DeepLabV3 architecture. This class will implement the methods: `create_model_randomly_initialized`, and `load_model_from_checkpoint`. These methods allow the model to be either initialized from scratch or loaded from a checkpoint.\n",
    "\n",
    "Instantiators are designed to be reusable across multiple experiments that use the same model architecture. However, it’s common to define different instantiators when the model’s backbone is loaded in different ways, for example:\n",
    "\n",
    "* One `ModelInstantiator` for a DeepLabV3 model pretrained with **SimCLR**\n",
    "* Another for a DeepLabV3 model pretrained with **BYOL**\n",
    "\n",
    "This distinction is necessary whenever the loading process for the backbone differs, for instance, if the parameter names or checkpoint structures do not align. In such cases, a custom loading strategy is required, which is encapsulated in the corresponding instantiator.\n",
    "\n",
    "Let's implement a very simple `ModelInstantiator` for the DeepLabV3 model, that can be customizable with different number of classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<__main__.DeepLabV3_Instantiator object at 0x70280d8f7dc0>\n"
     ]
    }
   ],
   "source": [
    "class DeepLabV3_Instantiator(ModelInstantiator):\n",
    "    def __init__(self, num_classes: int):\n",
    "        super().__init__()\n",
    "        self.num_classes = num_classes\n",
    "        \n",
    "    def create_model_randomly_initialized(self) -> L.LightningModule:\n",
    "        # Create a DeepLabV3 model with random initialization\n",
    "        model = DeepLabV3(num_classes=self.num_classes)\n",
    "        return model\n",
    "    \n",
    "    def create_model_and_load_backbone(self, backbone_checkpoint_path):\n",
    "        # Does nothing, just create a DeepLabV3 model with random initialization\n",
    "        return self.create_model_randomly_initialized()\n",
    "    \n",
    "    def load_model_from_checkpoint(self, checkpoint_path: PathLike) -> L.LightningModule:\n",
    "        # Load whole DeepLabV3 model from a checkpoint \n",
    "        model = DeepLabV3(num_classes=self.num_classes)\n",
    "        model = FromPretrained(model, ckpt_path=checkpoint_path, strict=False)\n",
    "        return model\n",
    "    \n",
    "\n",
    "# Ok, now we can create a instance of the `DeepLabV3_Instantiator` class.\n",
    "instantiator = DeepLabV3_Instantiator(num_classes=6)\n",
    "print(instantiator)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Creating the ModelConfig\n",
    "\n",
    "Once we have the `ModelInstantiator`, we can create a `ModelConfig` instance. This instance will encapsulate the model creation logic and metadata, and will be passed to the `Experiment` class to create the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ModelInformation(name='deeplabv3-crossentropy-adam', backbone_name='resnet50', task_type='semantic_segmentation', input_shape=None, output_shape=None, num_classes=6, return_logits=None)\n"
     ]
    }
   ],
   "source": [
    "information = ModelInformation(\n",
    "    name=\"deeplabv3-crossentropy-adam\", # Name of the model (required)\n",
    "    backbone_name=\"resnet50\",           # Backbone name (optional)\n",
    "    task_type=\"semantic_segmentation\",  # Task type (optional)\n",
    "    num_classes=6\n",
    ")\n",
    "\n",
    "print(information)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ModelConfig\n",
      "├── Instantiator: DeepLabV3_Instantiator\n",
      "├── name: deeplabv3-crossentropy-adam\n",
      "├── backbone_name: resnet50\n",
      "├── task_type: semantic_segmentation\n",
      "├── input_shape: None\n",
      "├── output_shape: None\n",
      "├── num_classes: 6\n",
      "└── return_logits: None\n"
     ]
    }
   ],
   "source": [
    "model_config = ModelConfig(\n",
    "    instantiator=instantiator,          # Model instantiator (required)\n",
    "    information=information,            # Model information (required)\n",
    ")\n",
    "print(model_config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Experiment Definition\n",
    "\n",
    "Once data module and model configuration are set up, we can define the `Experiment` class. The experiment will be named as `f3_deeplabv3_experiment`, and will use the `ModelConfig` instance created in the previous step.\n",
    "\n",
    "We also use the following parameters:\n",
    "- `max_epochs`: Set to 10 for quick testing.\n",
    "- `root_log_dir`: Set to `./logs` to store the experiment logs.\n",
    "- `execution_id`: Set to `0` for the first execution.\n",
    "- `checkpoint_metrics`: no custom checkpoint metrics are defined, as we will not use them in this example.\n",
    "- `evaluation_metrics`: we calculate the mean Intersection over Union (mIoU) metric for the evaluation.\n",
    "- `accelerator`: Set to `gpu` to use GPU acceleration (used to create Lightning trainer).\n",
    "- `devices`: Set to `1` to use one GPU (used to create Lightning trainer).\n",
    "- `seed`: Set to `42` for reproducibility.\n",
    "- `save_predictions`: Set to `True` to save predictions for this example.\n",
    "- `add_last_checkpoint`: Set to `True` to add the last checkpoint to the list of checkpoints.\n",
    "- `save_results`: Set to `True` to save the results of the experiment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================================================================\n",
      "                          🚀 Experiment: f3_deeplabv3 🚀\n",
      "================================================================================\n",
      "\n",
      "🛠 Execution Details\n",
      "   ├── Execution ID: 0\n",
      "   ├── Log Dir: /workspaces/minerva-workspace/Minerva-Dev/docs/notebooks/logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0\n",
      "   ├── Seed: 42\n",
      "   ├── Accelerator: gpu\n",
      "   ├── Devices: 1\n",
      "   ├── Max Epochs: 10\n",
      "   ├── Train Batches: all\n",
      "   ├── Val Batches: all\n",
      "   └── Test Batches: all\n",
      "\n",
      "🧠 Model Information\n",
      "   ├── Model Name: deeplabv3-crossentropy-adam\n",
      "   ├── Pretrained Backbone: FROM SCRATCH\n",
      "   ├── Input Shape: None\n",
      "   ├── Output Shape: None\n",
      "   └── Num Classes: 6\n",
      "\n",
      "📂 Dataset Information\n",
      "      ==================================================\n",
      "                          🆔 F3_Dataset\n",
      "      ==================================================\n",
      "      └── Predict Split: test\n",
      "      📂 Datasets:\n",
      "         ├── Train Dataset:\n",
      "         │      ==================================================\n",
      "         │                 📂 SimpleDataset Information            \n",
      "         │      ==================================================\n",
      "         │      📌 Dataset Type: SimpleDataset\n",
      "         │         └── Reader 0: NumpyArrayReader(samples=401, shape=(1, 701, 255), dtype=float64)\n",
      "         │         │     └── Transform: Repeat(axis=0, n_repetitions=3)\n",
      "         │         └── Reader 1: NumpyArrayReader(samples=401, shape=(1, 701, 255), dtype=uint8)\n",
      "         │         │     └── Transform: None\n",
      "         │         │\n",
      "         │         └── Total Readers: 2\n",
      "         │      ==================================================\n",
      "         ├── Val Dataset:\n",
      "         │      None\n",
      "         └── Test Dataset:\n",
      "                ==================================================\n",
      "                           📂 SimpleDataset Information            \n",
      "                ==================================================\n",
      "                📌 Dataset Type: SimpleDataset\n",
      "                   └── Reader 0: NumpyArrayReader(samples=200, shape=(1, 701, 255), dtype=float64)\n",
      "                   │     └── Transform: Repeat(axis=0, n_repetitions=3)\n",
      "                   └── Reader 1: NumpyArrayReader(samples=200, shape=(1, 701, 255), dtype=uint8)\n",
      "                   │     └── Transform: Squeeze(axis=0)\n",
      "                   │\n",
      "                   └── Total Readers: 2\n",
      "                ==================================================\n",
      "\n",
      "      🛠 **Dataloader Configurations:**\n",
      "         ├── Dataloader class: <class 'torch.utils.data.dataloader.DataLoader'>\n",
      "         ├── Train Dataloader Kwargs:\n",
      "               ├── batch_size: 16\n",
      "               ├── num_workers: 4\n",
      "               ├── shuffle: true\n",
      "               ├── drop_last: true\n",
      "         ├── Val Dataloader Kwargs:\n",
      "               ├── batch_size: 16\n",
      "               ├── num_workers: 4\n",
      "               ├── shuffle: false\n",
      "               ├── drop_last: false\n",
      "         └── Test Dataloader Kwargs:\n",
      "               ├── batch_size: 16\n",
      "               ├── num_workers: 4\n",
      "               ├── shuffle: false\n",
      "               ├── drop_last: false\n",
      "      ==================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "experiment = Experiment(\n",
    "    experiment_name=\"f3_deeplabv3\",  # Name of the experiment (required)\n",
    "    model_config=model_config,       # Model configuration (required)\n",
    "    data_module=data_module,         # Data module (required)\n",
    "    root_log_dir=Path(\"logs\"),  # Root log directory (optional)\n",
    "    execution_id=0,\n",
    "    checkpoint_metrics=None,\n",
    "    accelerator=\"gpu\",  # Accelerator (optional)\n",
    "    devices=1,          # Number of devices (optional)\n",
    "    max_epochs=10,\n",
    "    evaluation_metrics={\"mIoU\": JaccardIndex(num_classes=6, task=\"multiclass\")},\n",
    "    seed=42,\n",
    "    save_predictions=True,\n",
    "    save_results=True,\n",
    "    add_last_checkpoint=True\n",
    ")\n",
    "\n",
    "print(experiment)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Training and Evaluate Model\n",
    "\n",
    "Once the `Experiment` class is defined, we can run the experiment using the `run` method. \n",
    "The `run` method is the main entry point for executing the experiment. It handles the entire lifecycle of the experiment, including training, evaluation, and result logging.\n",
    "\n",
    "The `run` method have a `task` parameter that controls the type of task to be performed. It can be:\n",
    "- `fit`: To train the model\n",
    "- `evaluate`: To evaluate the model\n",
    "- `fit-evaluate`: To train and evaluate the model (both steps above, for convenience)\n",
    "\n",
    "for `fit` and `evaluate` tasks a lightning trainer object will be created using the parameters passed to the `Experiment` constructor (accelerator, devices, etc.).\n",
    "\n",
    "In general, the `fit` method will:\n",
    "- Setup directories, logger, and callbacks\n",
    "- Create the model randomly initialized (if `pretrained_backbone_path` is not provided) or create the model and load the backbone (if `pretrained_backbone_path` is provided)\n",
    "- Create the trainer and fit the model using `trainer.fit()` method\n",
    "- Save the model checkpoints and logs\n",
    "- Save the metrics to a CSV file\n",
    "\n",
    "The `evaluate` method will:\n",
    "- Setup directories and evaluation metrics\n",
    "- Create the model using the `load_model_from_checkpoint` method\n",
    "- Create the trainer and perform predictions using `trainer.predict()` method\n",
    "- Save the predictions to a file\n",
    "- Evaluate the model using the evaluation metrics, based on the predictions made\n",
    "- Save the results to a file\n",
    "\n",
    "> **NOTE**: If multiple `checkpoint_metrics` are defined, the `evaluate` method will be called for each checkpoint. The results will be saved in separate files, one for each checkpoint. You may control this behaviour by passing `ckpts_to_evaluate` parameter to the `experiment.run()` method,specifying only the checkpoint to be evaluated. By default, all checkpoints will be evaluated.\n",
    "\n",
    "We going to use the `fit-evaluate` task for this example, so we will train and evaluate the model in one step. The result is a dictionary with the following keys, one for each checkpoint:\n",
    "\n",
    "```python\n",
    "{\n",
    "    \"predictions_path\": predictions_file,   # Path to the predictions file\n",
    "    \"results_path\": results_filename,       # Path to the results file\n",
    "    \"results_path_per_sample\": results_filename_per_sample, # Path to the per sample results file\n",
    "    \"results\": results,                 # Pandas dataframe with the results for each metric\n",
    "    \"results_per_sample\": per_sample_results, # Pandas dataframe with the results for each sample\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "** Seed set to: 42 **\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (cuda), used: True\n",
      "TPU available: False, using: 0 TPU cores\n",
      "HPU available: False, using: 0 HPUs\n",
      "/home/vscode/.local/lib/python3.10/site-packages/lightning/pytorch/trainer/configuration_validator.py:70: You defined a `validation_step` but have no `val_dataloader`. Skipping val loop.\n",
      "LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "================================================================================\n",
      "                           Experiment: f3_deeplabv3                             \n",
      "================================================================================\n",
      "🧠 Model\n",
      "   ├── Name: deeplabv3-crossentropy-adam\n",
      "   ├── Finetune: No\n",
      "   ├── Resumed From: Beginning\n",
      "   ├── Expected Input Shape: None\n",
      "   ├── Expected Output Shape: None\n",
      "   ├── Total Params: 41,684,014\n",
      "   └── Trainable Params: 41,684,014 (100.00%)\n",
      "\n",
      "📊 Dataset\n",
      "   ├── Train Samples: 401\n",
      "   |   ├── Input Shape: shape=(3, 701, 255)\n",
      "   |   └── Label Shape: shape=(1, 701, 255)\n",
      "   └── Validation Dataset: None\n",
      "\n",
      "💾 Logging & Checkpoints\n",
      "   ├── Log Dir: /workspaces/minerva-workspace/Minerva-Dev/docs/notebooks/logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0\n",
      "   ├── Metrics Path: logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/metrics.csv\n",
      "   └── Checkpoints Dir: logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/checkpoints\n",
      "       └── Files: last.ckpt\n",
      "\n",
      "⚙️ Trainer Config\n",
      "   ├── Max Epochs: 10\n",
      "   ├── Train Batches: None\n",
      "   ├── Accelerator: gpu\n",
      "   ├── Strategy: auto\n",
      "   ├── Devices: 1\n",
      "   ├── Num Nodes: 1\n",
      "   └── Seed: 42\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name     | Type                    | Params | Mode \n",
      "-------------------------------------------------------------\n",
      "0 | backbone | DeepLabV3Backbone       | 25.6 M | train\n",
      "1 | fc       | DeepLabV3PredictionHead | 16.1 M | train\n",
      "2 | loss_fn  | CrossEntropyLoss        | 0      | train\n",
      "-------------------------------------------------------------\n",
      "41.7 M    Trainable params\n",
      "0         Non-trainable params\n",
      "41.7 M    Total params\n",
      "166.736   Total estimated model params size (MB)\n",
      "186       Modules in train mode\n",
      "0         Modules in eval mode\n",
      "/home/vscode/.local/lib/python3.10/site-packages/lightning/pytorch/loops/fit_loop.py:310: The number of training batches (25) is smaller than the logging interval Trainer(log_every_n_steps=50). Set a lower value for log_every_n_steps if you want to see logs for the training epoch.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9: 100%|██████████| 25/25 [00:11<00:00,  2.09it/s, v_num=0, train_loss=0.0285]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=10` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9: 100%|██████████| 25/25 [00:21<00:00,  1.16it/s, v_num=0, train_loss=0.0285]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (cuda), used: True\n",
      "TPU available: False, using: 0 TPU cores\n",
      "HPU available: False, using: 0 HPUs\n",
      "LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model loaded from logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/checkpoints/last.ckpt\n",
      "\n",
      "================================================================================\n",
      "                     Evaluation: f3_deeplabv3 (last.ckpt)                       \n",
      "================================================================================\n",
      "💾 Checkpoint\n",
      "   ├── Checkpoint Path: logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/checkpoints/last.ckpt\n",
      "   └── Predictions Path: logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/predictions/last.npy\n",
      "\n",
      "📊 Dataset\n",
      "   ├── Predict Samples: 200\n",
      "   ├── Input: shape=(3, 701, 255)\n",
      "   └── Label: shape=(701, 255)\n",
      "\n",
      "📈 Evaluation Metrics\n",
      "   ├── mIoU: MulticlassJaccardIndex\n",
      "\n",
      "⚙️ Trainer Config\n",
      "   ├── Max Epochs: 10\n",
      "   ├── Predict Batches: None\n",
      "   ├── Accelerator: gpu\n",
      "   ├── Strategy: auto\n",
      "   ├── Devices: 1\n",
      "   ├── Num Nodes: 1\n",
      "   └── Seed: 42\n",
      "Predicting DataLoader 0: 100%|██████████| 13/13 [00:04<00:00,  3.18it/s]\n",
      "Predictions saved to logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/predictions/last.npy\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Computing metrics: 100%|██████████| 13/13 [00:00<00:00, 13.14it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results saved to logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/results/last.csv\n",
      "No per-sample evaluation metrics provided. Skipping per-sample evaluation.\n",
      "Checkpoint last evaluated!\n",
      "Result: ['last']\n"
     ]
    }
   ],
   "source": [
    "result = experiment.run(task=\"fit-evaluate\")\n",
    "print(f\"Result: {list(result.keys())}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can get the results from the last checkpoint by using the `results` key. The results is a pandas dataframe with one column for each metric and one row for each sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sample</th>\n",
       "      <th>mIoU</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>0.691551</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  sample      mIoU\n",
       "0    all  0.691551"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ckpt_name = \"last\"\n",
    "result[ckpt_name][\"results\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Managing Results and Lifecycle\n",
    "\n",
    "Once the experiment is completed, we can use the `Experiment` class to manage the results and lifecycle of the experiment.\n",
    "\n",
    "The following methods and properties are available:\n",
    "- `checkpoint_paths` (property): Returns the paths to the model checkpoints saved during training. This is a dictionary with the checkpoint name as key and the path as value.\n",
    "- `training_metrics_path` (property): Returns the path to the training metrics CSV file.\n",
    "- `training_metrics` (property): Returns the training metrics as a Pandas dataframe.\n",
    "- `prediction_paths` (property): Returns the paths to the predictions files saved during evaluation, one for each checkpoint. This is a dictionary with the checkpoint name as key and the path as value.\n",
    "- `load_predictions_of_ckpt` (method): Loads the predictions for a specific checkpoint. It expects the checkpoint name as argument. Names can be achieved using the `checkpoint_paths` property.\n",
    "- `results_paths` (property): Returns the paths to the results files saved during evaluation, one for each checkpoint. This is a dictionary with the checkpoint name as key and the path as value.\n",
    "- `load_results_of_ckpt` (method): Loads the results for a specific checkpoint. It expects the checkpoint name as argument. Names can be achieved using the `results_paths` property.\n",
    "- `status` (property): Returns information and status of the experiment in a dictionary format. The `state` key indicates whether the experiment is: \"evaluated\", \"predicted\", \"executed\", or \"not executed\". The \"not executed\" means the experiment was not run yet. The \"executed\" means the experiment was run, but not evaluated yet. The \"predicted\" means the experiment was run and predictions were made, but not evaluated yet. The \"evaluated\" means the experiment was run and evaluated. This state is based on the files saved in the experiment directory. Thus, if you opt to not save predictions or results, the status will be \"executed\" even if the experiment was run and evaluated once.\n",
    "- `cleanup` (method): Cleans up the experiment directory, removing all files and subdirectories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'experiment_name': 'f3_deeplabv3',\n",
       " 'log_dir': PosixPath('/workspaces/minerva-workspace/Minerva-Dev/docs/notebooks/logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0'),\n",
       " 'checkpoints': {'last': PosixPath('logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/checkpoints/last.ckpt')},\n",
       " 'training_metrics': PosixPath('logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/metrics.csv'),\n",
       " 'prediction_paths': {'last': PosixPath('logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/predictions/last.npy')},\n",
       " 'results_paths': {'last': PosixPath('logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0/results/last.csv')},\n",
       " 'state': 'evaluated'}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can check the experiment state using status funtion\n",
    "\n",
    "experiment.status"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can print the directory structure of the experiment directory to see the files and subdirectories created during the experiment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logs\n",
      "└── f3_deeplabv3\n",
      "    └── F3_Dataset\n",
      "        └── deeplabv3-crossentropy-adam\n",
      "            └── 0\n",
      "                ├── checkpoints\n",
      "                │   └── last.ckpt\n",
      "                ├── predictions\n",
      "                │   └── last.npy\n",
      "                ├── results\n",
      "                │   └── last.csv\n",
      "                └── metrics.csv\n"
     ]
    }
   ],
   "source": [
    "def print_tree(root: Path, prefix: str = \"\"):\n",
    "    if not root.is_dir():\n",
    "        print(f\"{root} is not a directory.\")\n",
    "        return\n",
    "\n",
    "    entries = sorted(root.iterdir(), key=lambda x: (x.is_file(), x.name.lower()))\n",
    "    for i, entry in enumerate(entries):\n",
    "        connector = \"└── \" if i == len(entries) - 1 else \"├── \"\n",
    "        print(prefix + connector + entry.name)\n",
    "        if entry.is_dir():\n",
    "            extension = \"    \" if i == len(entries) - 1 else \"│   \"\n",
    "            print_tree(entry, prefix + extension)\n",
    "\n",
    "\n",
    "print(experiment.root_log_dir)\n",
    "print_tree(experiment.root_log_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check the evaluated metrics from a specific checkpoint using the `load_results_of_ckpt` method.It is equivalent from the results returned by the `run` method (using `fit-evaluate` task)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sample</th>\n",
       "      <th>mIoU</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>all</td>\n",
       "      <td>0.691551</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  sample      mIoU\n",
       "0    all  0.691551"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = experiment.load_results_of_ckpt(\"last\")\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check the training metrics using the `training_metrics` property. It returns a pandas dataframe with the training metrics for each epoch, based on lightning CSV Logger."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>epoch</th>\n",
       "      <th>step</th>\n",
       "      <th>train_loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>0.331632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>0.085685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>74</td>\n",
       "      <td>0.060906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>99</td>\n",
       "      <td>0.051845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>124</td>\n",
       "      <td>0.049144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>149</td>\n",
       "      <td>0.041069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>174</td>\n",
       "      <td>0.036828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>199</td>\n",
       "      <td>0.034012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>224</td>\n",
       "      <td>0.030449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>249</td>\n",
       "      <td>0.028480</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   epoch  step  train_loss\n",
       "0      0    24    0.331632\n",
       "1      1    49    0.085685\n",
       "2      2    74    0.060906\n",
       "3      3    99    0.051845\n",
       "4      4   124    0.049144\n",
       "5      5   149    0.041069\n",
       "6      6   174    0.036828\n",
       "7      7   199    0.034012\n",
       "8      8   224    0.030449\n",
       "9      9   249    0.028480"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_metrics = experiment.training_metrics\n",
    "training_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can plot the training metrics using matplotlib or any other plotting library. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(training_metrics[\"epoch\"], training_metrics[\"train_loss\"], label=\"Train Loss\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Train Loss\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If saved, we can also obtain the predictions using the `load_predictions_of_ckpt` method. It return the logits predictions for the specific checkpoint. The predictions are saved in a numpy array format, with (N, L, H, W) shape, where N is the number of samples, L is the number of classes (logits), H is the height and W is the width of the image. \n",
    "\n",
    "Let's compare the predictions with the ground truth labels using matplotlib. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(701, 255)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = 100\n",
    "\n",
    "# Get the test data and labels\n",
    "test_labels = experiment.data_module.test_dataset[index][1]\n",
    "test_labels.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(701, 255)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = experiment.load_predictions_of_ckpt(\"last\")\n",
    "# Calculcate the predictions from logits\n",
    "predictions = predictions[index].argmax(axis=0)\n",
    "predictions.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lets visualize the test data, labels and predictions\n",
    "\n",
    "fig, axes = plt.subplots(1, 2, figsize=(10, 5))\n",
    "axes[0].imshow(predictions.T)\n",
    "axes[0].set_title(\"Predicted\")\n",
    "axes[1].imshow(test_labels.T)\n",
    "axes[1].set_title(\"True\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Cleanup\n",
    "\n",
    "Finally, we can clean up the experiment directory using the `cleanup` method. This will remove all files and subdirectories created during the experiment. This is useful to free up disk space and remove unnecessary files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Experiment at '/workspaces/minerva-workspace/Minerva-Dev/docs/notebooks/logs/f3_deeplabv3/F3_Dataset/deeplabv3-crossentropy-adam/0' cleaned up.\n"
     ]
    }
   ],
   "source": [
    "experiment.cleanup()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can print the directory structure of the experiment directory to check if files were removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logs\n",
      "└── f3_deeplabv3\n",
      "    └── F3_Dataset\n",
      "        └── deeplabv3-crossentropy-adam\n"
     ]
    }
   ],
   "source": [
    "print(experiment.root_log_dir)\n",
    "print_tree(experiment.root_log_dir)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
